<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xyh&#39;s Blog</title>
  
  <subtitle>何以解忧，唯有代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiayunhu.github.io/"/>
  <updated>2019-10-23T08:36:51.631Z</updated>
  <id>http://xiayunhu.github.io/</id>
  
  <author>
    <name>XYH</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue组件（十三）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E7%BB%84%E4%BB%B6%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue组件（十三）/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2019-10-23T08:36:51.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js组件"><a href="#Vue-js组件" class="headerlink" title="Vue.js组件"></a>Vue.js组件</h3><p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。<br>注册一个全局组件语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(tagName, options)</span><br></pre></td></tr></table></figure><br>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tagName&gt;&lt;/tagName&gt;</span><br></pre></td></tr></table></figure></p><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p>注册一个简单的全局组件 xyh，并使用它：<br><img src="http://pic.zhaotu.me/2019/10/23/15be0db7ed5e7b56e.png" alt="“Vue组件”"></p><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：<br>注册一个简单的局部组件 xyh，并使用它：<br><img src="http://pic.zhaotu.me/2019/10/23/28fede28b7170c2fd.png" alt="“Vue组件”"></p><h4 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h4><p>prop 是父组件用来传递数据的一个自定义属性。<br>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：<br>如以下例子：<br><img src="http://pic.zhaotu.me/2019/10/23/39e86fbaee2f0bc46.png" alt="“Vue组件”"></p><h4 id="动态-Prop"><a href="#动态-Prop" class="headerlink" title="动态 Prop"></a>动态 Prop</h4><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件<br><img src="http://pic.zhaotu.me/2019/10/23/4261c2fedf305066d.png" alt="“Vue组件”"><br>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p><h4 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h4><p>组件可以为 props 指定验证要求。<br>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: &apos;hello&apos; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        // 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return [&apos;success&apos;, &apos;warning&apos;, &apos;danger&apos;].indexOf(value) !== -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。<br>type 可以是下面原生构造器：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol<br>type 也可以是一个自定义构造器，使用 instanceof 检测。</li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p><p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：<br>使用 $on(eventName) 监听事件<br>使用 $emit(eventName) 触发事件<br>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><p>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。<br><img src="http://pic.zhaotu.me/2019/10/23/512580cc66533e56f.png" alt="“Vue组件”"><br><img src="http://pic.zhaotu.me/2019/10/23/64a0c6614da9887f6.png" alt="“Vue组件”"></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js组件&quot;&gt;&lt;a href=&quot;#Vue-js组件&quot; class=&quot;headerlink&quot; title=&quot;Vue.js组件&quot;&gt;&lt;/a&gt;Vue.js组件&lt;/h3&gt;&lt;p&gt;组件（Component）是 Vue.js 最强大的功能之一。&lt;br&gt;组件可以扩展 HTML
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue表单（十二）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E8%A1%A8%E5%8D%95%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue表单（十二）/</id>
    <published>2019-10-21T16:00:00.000Z</published>
    <updated>2019-10-23T06:28:39.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表单基础语法"><a href="#表单基础语法" class="headerlink" title="表单基础语法"></a>表单基础语法</h3><p>你可以用 v-model 指令在表单 input、textarea 及 select元素上创建双向数据绑定。 它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br>以下实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：<br><img src="http://pic.zhaotu.me/2019/10/22/15286b0dd6da3d4e1.png" alt="“Vue表单”"></p><h4 id="复选框（v-model-”checked”）"><a href="#复选框（v-model-”checked”）" class="headerlink" title="复选框（v-model=”checked”）"></a>复选框（v-model=”checked”）</h4><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：<br>下列例子是复选框的双向数据绑定：<br><img src="http://pic.zhaotu.me/2019/10/23/2d05ec0563bdc3668.png" alt="“Vue表单”"></p><h4 id="单选按钮（v-model-”checked”）"><a href="#单选按钮（v-model-”checked”）" class="headerlink" title="单选按钮（v-model=”checked”）"></a>单选按钮（v-model=”checked”）</h4><p>单选按钮的双向数据绑定：<br><img src="http://pic.zhaotu.me/2019/10/23/33c8d0db1e378bab1.png" alt="“Vue表单”"></p><h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><p>1、单选框（v-model=”selected”）：<br><img src="http://pic.zhaotu.me/2019/10/23/45360500f4bb36653.png" alt="“Vue表单”"><br><b>注意：如果 v-model 表达式的初始值未能匹配任何选项，select元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</b><br>2、多选框（绑定到一个数组）：<br><img src="http://pic.zhaotu.me/2019/10/23/5a09f3de0d957aa46.png" alt="“Vue表单”"></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>1、.lazy<br>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br></pre></td></tr></table></figure><br>2、.number<br>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br></pre></td></tr></table></figure><br>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。<br>3、.trim<br>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;表单基础语法&quot;&gt;&lt;a href=&quot;#表单基础语法&quot; class=&quot;headerlink&quot; title=&quot;表单基础语法&quot;&gt;&lt;/a&gt;表单基础语法&lt;/h3&gt;&lt;p&gt;你可以用 v-model 指令在表单 input、textarea 及 select元素上创建双向数据绑定。
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue事件处理器（十一）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue事件处理器（十一）/</id>
    <published>2019-10-20T16:00:00.000Z</published>
    <updated>2019-10-22T08:23:12.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js-事件处理器"><a href="#Vue-js-事件处理器" class="headerlink" title="Vue.js 事件处理器"></a>Vue.js 事件处理器</h3><h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><p>监听事件可以用v-on 指令监听 DOM 事件<br>例如以下代码：<br><img src="http://pic.zhaotu.me/2019/10/21/14572c752517b3aba.jpg" alt="“Vue事件处理器（十一）”"><br>在许多的情况下，事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on还可以   接收一个需要调用的方法名称。<br>例如以下代码：<br><img src="http://pic.zhaotu.me/2019/10/21/2c773e802b6937cf0.png" alt="“Vue事件处理器（十一）”"></p><h5 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h5><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-3&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法 中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。<br>为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li>.stop </li><li>.prevent </li><li>.capture</li><li>.self</li><li>.once</li><li>.passive</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><b>注意：不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</b></p><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span><br><span class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><br>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写语法 --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>全部的按键别名：</p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获 “删除” 和 “退格” 键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;!-- Alt + C --&gt;</span><br><span class="line">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</span><br><span class="line">&lt;!-- Ctrl + Click --&gt;</span><br><span class="line">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="自动匹配按键修饰符（2-5-0-新增）"><a href="#自动匹配按键修饰符（2-5-0-新增）" class="headerlink" title="自动匹配按键修饰符（2.5.0 新增）"></a>自动匹配按键修饰符（2.5.0 新增）</h5><p>你也可直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keyup.page-down=&quot;onPageDown&quot;&gt;</span><br></pre></td></tr></table></figure>在上面的例子中，处理函数仅在 $event.key === ‘PageDown’ 时被调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js-事件处理器&quot;&gt;&lt;a href=&quot;#Vue-js-事件处理器&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 事件处理器&quot;&gt;&lt;/a&gt;Vue.js 事件处理器&lt;/h3&gt;&lt;h4 id=&quot;v-on指令&quot;&gt;&lt;a href=&quot;#v-on指令&quot;
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue样式绑定（十）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A%EF%BC%88%E5%8D%81%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue样式绑定（十）/</id>
    <published>2019-09-10T16:00:00.000Z</published>
    <updated>2019-10-21T02:33:12.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js-样式绑定"><a href="#Vue-js-样式绑定" class="headerlink" title="Vue.js 样式绑定"></a>Vue.js 样式绑定</h3><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用 v-bind 处理它们： 只需要通过表达式计算出字符串结果即可。在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。 表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h4 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h4><p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:<br>例1、将 isActive 设置为 true 显示了一个绿色的 div 块，如果设置为 false 则不显示：<br><img src="http://pic.zhaotu.me/2019/09/11/1bbc507db31bda863.png" alt="“Vue第10天”"><br>以上的例子div的class为active。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;active&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>你可以在对象中传入更多属性来动态切换多个 class。此外，v-bind:class 指令也可以与普通的 class 属性共存。<br><img src="http://pic.zhaotu.me/2019/09/11/200fa6ffef5dcbd24.png" alt="“Vue第10天”"><br>当 isActive 或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError 的值为 true，class 列表将变为 “static active text-danger”。</p><p>我们也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：<br><img src="http://pic.zhaotu.me/2019/09/11/335639896276aed15.png" alt="“Vue第10天”"><br><img src="http://pic.zhaotu.me/2019/09/11/4b677a12199bb882c.png" alt="“Vue第10天”"></p><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>我们可以把一个数组传给 v-bind:class，以应用一个 class 列表：<br><img src="http://pic.zhaotu.me/2019/09/11/550b6934d194aa7bc.png" alt="“Vue第10天”"><br>渲染为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>如果你也想根据条件切换列表中的 class，可以用三元表达式：<br><img src="http://pic.zhaotu.me/2019/09/11/65459c1aa6fbddefa.png" alt="“Vue第10天”"></p><h4 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h4><p>1、v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;xyh&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>我们可以在 v-bind:style 直接设置样式：<br><img src="http://pic.zhaotu.me/2019/09/11/772a0cff465825976.png" alt="“Vue第10天”"><br>2、或者直接绑定到一个样式对象通常更好，这会让模板更清晰：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><br><img src="http://pic.zhaotu.me/2019/09/11/8d97244ef2381c98f.png" alt="“Vue第10天”"></p><p>3、v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><p>当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js-样式绑定&quot;&gt;&lt;a href=&quot;#Vue-js-样式绑定&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 样式绑定&quot;&gt;&lt;/a&gt;Vue.js 样式绑定&lt;/h3&gt;&lt;p&gt;操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue监听属性（九）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue监听属性（九）/</id>
    <published>2019-09-09T16:00:00.000Z</published>
    <updated>2019-10-21T02:32:47.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue监听属性"><a href="#Vue监听属性" class="headerlink" title="Vue监听属性"></a>Vue监听属性</h3><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>Vue.js 监听属性 watch，我们可以通过 watch 来响应数据的变化<br><b>实例1、通过使用 watch 实现计数器：</b><br><img src="http://pic.zhaotu.me/2019/09/11/16adc68956a9f6fe3.png" alt="“Vue第9天”"><br>展示页面效果如下：<br><img src="http://pic.zhaotu.me/2019/09/11/28737e091b07e12c2.png" alt="“Vue第9天”"></p><p><b>实例2、了解了一些基本的用法，我们来写一个简单的购物车。</b><br>总共分为三个部分来写，一个是前端的页面展示、CSS样式美化以及Vue的数据绑定。<br>（1）前端Html页面<br>由于代码中带有双括号，网站会出现错误，所以我这里全部用代码截图展示。如果想要源码的话，可以加我好友，或者关注我微信公众号，查找源码。<br><img src="http://pic.zhaotu.me/2019/09/11/35f04de63b5bea726.png" alt="“Vue第9天”"></p><p>（2）CSS样式处理<br><img src="http://pic.zhaotu.me/2019/09/11/6ce1b9145c4261d82.png" alt="“Vue第9天”"></p><p>（3）Vue数据处理<br><img src="http://pic.zhaotu.me/2019/09/11/45229d492abc9f6ab.png" alt="“Vue第9天”"><br><img src="http://pic.zhaotu.me/2019/09/11/5d965ae05afd7d2a5.png" alt="“Vue第9天”"></p><p>展示的页面效果如下：<br><img src="http://pic.zhaotu.me/2019/09/11/719fbfd19aeda8bf6.png" alt="“Vue第9天”"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue监听属性&quot;&gt;&lt;a href=&quot;#Vue监听属性&quot; class=&quot;headerlink&quot; title=&quot;Vue监听属性&quot;&gt;&lt;/a&gt;Vue监听属性&lt;/h3&gt;&lt;h4 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue计算属性（八）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue计算属性（八）/</id>
    <published>2019-09-01T16:00:00.000Z</published>
    <updated>2019-10-21T02:32:17.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js-计算属性"><a href="#Vue-js-计算属性" class="headerlink" title="Vue.js 计算属性"></a>Vue.js 计算属性</h3><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>计算属性关键词: computed，对于任何复杂逻辑，你都应当使用计算属性。<br><img src="http://pic.zhaotu.me/2019/09/02/12bf07fb980042858.md.png" alt="“Vue第8天”"><br>接下来我们看看计算属性的实例<br><img src="http://pic.zhaotu.me/2019/09/02/2891d12eaaf961504.png" alt="“Vue第8天”"></p><h4 id="computed-setter"><a href="#computed-setter" class="headerlink" title="computed setter"></a>computed setter</h4><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter<br><img src="http://pic.zhaotu.me/2019/09/02/3fb16852e375bd728.png" alt="“Vue第8天”"></p><p>从实例运行结果看在运行 vm.site = ‘<a href="http://www.xyhwh.cn&#39;" target="_blank" rel="noopener">http://www.xyhwh.cn&#39;</a>; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js-计算属性&quot;&gt;&lt;a href=&quot;#Vue-js-计算属性&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 计算属性&quot;&gt;&lt;/a&gt;Vue.js 计算属性&lt;/h3&gt;&lt;h4 id=&quot;computed&quot;&gt;&lt;a href=&quot;#computed&quot;
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue条件渲染（七）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue条件渲染（七）/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-10-21T02:31:46.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h4><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。<br><img src="http://pic.zhaotu.me/2019/09/02/1299a8f57e6a45a0c.png" alt="“Vue第7天”"><br>也可以用 v-else 添加一个“else 块”：</p><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><p>你可以使用 v-else 指令来表示 v-if 的“else 块”：<br><img src="http://pic.zhaotu.me/2019/09/02/21f6bc60df4c615a8.png" alt="“Vue第7天”"><br>v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p><h4 id="v-else-if（2-1-0-新增）"><a href="#v-else-if（2-1-0-新增）" class="headerlink" title="v-else-if（2.1.0 新增）"></a>v-else-if（2.1.0 新增）</h4><p>v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用<br><img src="http://pic.zhaotu.me/2019/09/02/3a2ecdb1f398ad7d5.png" alt="“Vue第7天”"><br>类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样<br><img src="http://pic.zhaotu.me/2019/09/02/499e0ef072f98a1d0.png" alt="“Vue第7天”"><br>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>条件渲染我就介绍这两种，一个是v-if，另一个是v-show。如果想要多了解的话，可以在vue.js官网上查看相关技术文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h3&gt;&lt;h4 id=&quot;v-if指令&quot;&gt;&lt;a href=&quot;#v-if指令&quot; class=&quot;headerlink&quot; title=&quot;v-if指
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue循环语句（六）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue循环语句（六）/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-10-21T02:31:00.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h4><p>我们可以用 v-for 指令基于一个数组来渲染一个列表。<br>v-for 指令需要使用 item in items 形式的特殊语法，其中<b>items 是源数据数组</b>，而 <b>item 则是被迭代的数组元素的别名</b>。<br>例如：我们把绑定的数据到数组，放到表格中把数据循环展现出来。<br><img src="http://pic.zhaotu.me/2019/08/15/1967d2200ac7feb03.png" alt="“Vue第6天”"></p><h4 id="v-for-迭代对象"><a href="#v-for-迭代对象" class="headerlink" title="v-for 迭代对象"></a>v-for 迭代对象</h4><p>v-for 可以通过一个对象的属性来迭代数据<br><img src="http://pic.zhaotu.me/2019/08/15/2b44da1026a0a15a1.png" alt="“Vue第6天”"><br>在 v-for 块中，我们可以访问所有父作用域的属性。v-for 还支持一个可选的第二个参数，即当前项的索引。<br><img src="http://pic.zhaotu.me/2019/08/15/3749885361ab63938.png" alt="“Vue第6天”"><br>你也可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="第二参数"><a href="#第二参数" class="headerlink" title="第二参数"></a>第二参数</h5><p>可以提供第二个的参数为 property 名称 (也就是键名)。<br><img src="http://pic.zhaotu.me/2019/08/15/41856f873d429f01f.png" alt="“Vue第6天”"></p><h5 id="第三参数"><a href="#第三参数" class="headerlink" title="第三参数"></a>第三参数</h5><p>还可以用第三个参数作为索引。<br><img src="http://pic.zhaotu.me/2019/08/15/5dd6869ace672bb9b.png" alt="“Vue第6天”"></p><h4 id="在-v-for-里使用值范围"><a href="#在-v-for-里使用值范围" class="headerlink" title="在 v-for 里使用值范围"></a>在 v-for 里使用值范围</h4><p>v-for 也可以接受整数。在这种情况下，它会把模板重复对应次数。<br><img src="http://pic.zhaotu.me/2019/08/15/6ded0d5514a5f085b.png" alt="“Vue第6天”"></p><h4 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 v-for</h4><p>在自定义组件上，你可以像在任何普通元素上一样使用 v-for 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><br><b>2.2.0+ 的版本里，当在组件上使用 v-for 时，key 现在是必须的。</b></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天就学到这了，循环是每个语言最重要的部分之一了，还是要好好的花时间研究的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h3&gt;&lt;h4 id=&quot;v-for指令&quot;&gt;&lt;a href=&quot;#v-for指令&quot; class=&quot;headerlink&quot; title=&quot;v-f
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue条件语句（五）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue条件语句（五）/</id>
    <published>2019-08-12T16:00:00.000Z</published>
    <updated>2019-10-21T02:29:01.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 true值的时候被渲染。<br>这里的v-if 指令将根据表达式 wh 的值(true 或 false )来决定是否插入 p 元素。<br>把一个 “template”元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 “template” 元素 。<br><img src="http://pic.zhaotu.me/2019/08/14/1a31ea82a4400d64e.png" alt="“Vue第5天”"></p><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><p>可以用 v-else 指令给 v-if 添加一个 “else” 块<br>举个例子：随机生成一个数字，判断是否大于0.5，然后输出对应信息。<br><img src="http://pic.zhaotu.me/2019/08/14/28153664c98b476df.png" alt="“Vue第5天”"></p><h4 id="v-else-if-2-1-0-新增"><a href="#v-else-if-2-1-0-新增" class="headerlink" title="v-else-if (2.1.0 新增)"></a>v-else-if (2.1.0 新增)</h4><p>v-else-if，顾名思义，充当 v-if 的”else-if 块”，可以连续使用<br><img src="http://pic.zhaotu.me/2019/08/14/33870f325d745fa1d.png" alt="“Vue第5天”"><br>类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>根据条件展示元素的选项是 v-show 指令<br><img src="http://pic.zhaotu.me/2019/08/14/4df615d00fec6fa1c.png" alt="“Vue第5天”"><br>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。<br><b>注意：v-show 不支持 <template> 元素，也不支持 v-else。</template></b></p><h4 id="v-if-对比-v-show"><a href="#v-if-对比-v-show" class="headerlink" title="v-if 对比 v-show"></a>v-if 对比 v-show</h4><p>1、v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>2、v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>3、相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。<br>4、一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><h4 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a>v-if 与 v-for 一起使用</h4><p>首先是不推荐这样使用的，当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>条件语句在我们平时做项目的时候用到的非常多的，所以还是要好好研究透，多多练习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h3&gt;&lt;h4 id=&quot;v-if&quot;&gt;&lt;a href=&quot;#v-if&quot; class=&quot;headerlink&quot; title=&quot;v-if&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue模板语法（四）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue模板语法（四）/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2019-10-21T02:28:09.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue的模板语法"><a href="#Vue的模板语法" class="headerlink" title="Vue的模板语法"></a>Vue的模板语法</h3><p>接着昨天的继续学习模板语法。</p><h4 id="动态参数（2-6-0-新增）"><a href="#动态参数（2-6-0-新增）" class="headerlink" title="动态参数（2.6.0 新增）"></a>动态参数（2.6.0 新增）</h4><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt; &quot;</span><br></pre></td></tr></table></figure><br>这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。<br>例如，如果你的 Vue 实例有一个 data 属性 attributeName，其值为 “href”，那么这个绑定将等价于 v-bind:href。<br>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt; &quot;</span><br></pre></td></tr></table></figure><br>同样地，当 eventName 的值为 “focus” 时，v-on:[eventName] 将等价于 v-on:focus。<br><img src="http://pic.zhaotu.me/2019/08/13/1df72ac35b6757aa4.png" alt="“Vue第4天”"></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。<br>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;&quot;</span><br></pre></td></tr></table></figure></p><h4 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h4><p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定<br><img src="http://pic.zhaotu.me/2019/08/13/25eda2c25eb110e87.png" alt="“Vue第4天”"><br>v-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。<br>按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。<br>例如：用户点击按钮后对字符串进行反转操作<br><img src="http://pic.zhaotu.me/2019/08/13/35b4fce4cbf1461fc.png" alt="“Vue第4天”"></p><h4 id="过滤器（了解）"><a href="#过滤器（了解）" class="headerlink" title="过滤器（了解）"></a>过滤器（了解）</h4><p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化<br><img src="http://pic.zhaotu.me/2019/08/13/4b285b0691ed674e9.png" alt="“Vue第4天”"><br>例如：对输入的字符串第一个字母转为大写<br><img src="http://pic.zhaotu.me/2019/08/13/5e41cc6cf3d2d981a.png" alt="“Vue第4天”"></p><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><p>v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写。</p><h5 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a>v-bind 缩写</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a>v-on 缩写</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天一个学了5个模板语法，同样也是我们学习vue的重点，主要有动态参数（2.6.0 新增）、修饰符、用户输入、过滤器、缩写（v-bind 缩写、v-on 缩写）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue的模板语法&quot;&gt;&lt;a href=&quot;#Vue的模板语法&quot; class=&quot;headerlink&quot; title=&quot;Vue的模板语法&quot;&gt;&lt;/a&gt;Vue的模板语法&lt;/h3&gt;&lt;p&gt;接着昨天的继续学习模板语法。&lt;/p&gt;
&lt;h4 id=&quot;动态参数（2-6-0-新增）&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue模板语法（三）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue模板语法（三）/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2019-10-21T02:26:42.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue的模板语法"><a href="#Vue的模板语法" class="headerlink" title="Vue的模板语法"></a>Vue的模板语法</h3><p>今天来我们来学习一下Vue的模板语法，Vue.js使用了基于HTML的模板语法，它的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。<br>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，<br>并把 DOM 操作次数减到最少。</p><h4 id="文本插值-双大括号"><a href="#文本插值-双大括号" class="headerlink" title="文本插值 (双大括号)"></a>文本插值 (双大括号)</h4><p>数据绑定最常见的形式就是使用“双大括号”的文本插值<br><img src="http://pic.zhaotu.me/2019/08/12/QQ20190812095737cd3d89ba69b4b8d5.png" alt="“Vue第3天”"></p><h4 id="HTML（”v-html”指令）"><a href="#HTML（”v-html”指令）" class="headerlink" title="HTML（”v-html”指令）"></a>HTML（”v-html”指令）</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 “v-html” 指令<br><img src="http://pic.zhaotu.me/2019/08/12/25a9af56a827c065b.png" alt="“Vue第3天”"></p><h4 id="特性（”v-bind”指令）"><a href="#特性（”v-bind”指令）" class="headerlink" title="特性（”v-bind”指令）"></a>特性（”v-bind”指令）</h4><p>HTML 属性中的值应使用 “v-bind” 指令，用一个例子来说明下这个指令。<br>判断 class1 的值，如果为 true 使用 class1 类的样式，否则不使用该类。<br><img src="http://pic.zhaotu.me/2019/08/12/3a05adc3e9739a969.png" alt="“Vue第3天”"></p><h4 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h4><p>实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。<br><img src="http://pic.zhaotu.me/2019/08/12/4948672d6ab731261.png" alt="“Vue第3天”"></p><h4 id="指令（”v-if”指令）"><a href="#指令（”v-if”指令）" class="headerlink" title="指令（”v-if”指令）"></a>指令（”v-if”指令）</h4><p>指令 (Directives) 是带有 v- 前缀的特殊特性。<br>指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。<br>指令特性的值预期是单个 JavaScript 表达式 (“v-for” 是例外情况，以后我们再讨论)。<br><img src="http://pic.zhaotu.me/2019/08/12/5748551d39c0495eb.png" alt="“Vue第3天”"></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>一些指令能够接收一个”参数”，在指令名称之后以冒号表示。例如，”v-bind” 指令可以用于响应式地更新 HTML 特性：<br><img src="http://pic.zhaotu.me/2019/08/12/69211f120112bf485.png" alt="“Vue第3天”"><br>另一个是 “v-on” 指令，它用于监听 DOM 事件，在这里参数是监听的事件名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;a v-on:click=&quot;doSomething&quot;&gt;&quot; //最外边的双引号要去掉，我这里是网站编译的需要。</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天一个学了6个模板语法，这是我们学习vue的重点，主要有双大括号插值、”v-html”指令、”v-bind”指令、JavaScript 表达式、”v-if”指令、还有指令接收”参数”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue的模板语法&quot;&gt;&lt;a href=&quot;#Vue的模板语法&quot; class=&quot;headerlink&quot; title=&quot;Vue的模板语法&quot;&gt;&lt;/a&gt;Vue的模板语法&lt;/h3&gt;&lt;p&gt;今天来我们来学习一下Vue的模板语法，Vue.js使用了基于HTML的模板语法，它的核心是一
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue介绍（二）</title>
    <link href="http://xiayunhu.github.io/Vue/Vue%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/Vue介绍（二）/</id>
    <published>2019-08-09T16:00:00.000Z</published>
    <updated>2019-10-21T02:25:09.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于我们使用vue-cli脚手架搭建的项目学习起来难度比较大，我们放到进阶阶段再学习，我们先用vue包引入来学习vue。</p><h3 id="vue-js包"><a href="#vue-js包" class="headerlink" title="vue.js包"></a>vue.js包</h3><p>1、Staticfile CDN（国内） : <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a><br>2、unpkg：<a href="https://unpkg.com/vue/dist/vue.js" target="_blank" rel="noopener">https://unpkg.com/vue/dist/vue.js</a><br>3、cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></p><h3 id="开始学习vue"><a href="#开始学习vue" class="headerlink" title="开始学习vue"></a>开始学习vue</h3><p>1、每个 Vue 应用都需要通过实例化 Vue 来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var xyh = new Vue(&#123;</span><br><span class="line">  // 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>2、通过以下的实例我们来分析</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">el</td><td style="text-align:center">它是 DOM 元素中的 id，数据改动全部在以上指定的 div 内，div 外部不受影响</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">用于定义属性，下面例子有两个属性分别为：name、url</td></tr><tr><td style="text-align:center">methods</td><td style="text-align:center">用于定义的函数，可以通过 return 来返回函数值</td></tr><tr><td style="text-align:center">双括号</td><td style="text-align:center">用于输出对象属性和函数返回值。</td></tr></tbody></table><p><img src="http://pic.zhaotu.me/2019/08/10/QQ201908101016080bc1d87a46f1782d.png" alt="“Vue第2天”"><br>3、当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变<br>时，html视图将也会产生相应的变化。<br><img src="http://pic.zhaotu.me/2019/08/10/22749f277dfd1ef2f.png" alt="“Vue第2天”"><br><b>也就是说，无论我们给data对象改变值，还是直接改变属性值，都会改变原始数据。<br>一般来说，除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。<br></b></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天先就了解那么多，主要是学习了引用vue.js包、初始化vue、vue中的一些参数和用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于我们使用vue-cli脚手架搭建的项目学习起来难度比较大，我们放到进阶阶段再学习，我们先用vue包引入来学习vue。&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>创建Vue项目（一）</title>
    <link href="http://xiayunhu.github.io/Vue/%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://xiayunhu.github.io/Vue/创建Vue项目（一）/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-10-21T02:17:54.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近想着应该好好的学习下vue.js来补充下自己的知识，所以接下来我将会把每天学的东西记录下来，供我们大家一起学习。</p><h3 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h3><p>1、先全局安装vue-cli<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --global vue-cli</span><br></pre></td></tr></table></figure>2、创建一个新的项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack xyhVue（你的项目名称）</span><br></pre></td></tr></table></figure>3、紧接着需要一些配置，默认回车就好。<br>4、创建好之后，进入到你的项目文件下，运行项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm run dev</span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully in 43557ms                                     4:24:11 PM</span><br><span class="line"> I  Your application is running here: http://localhost:8080</span><br></pre></td></tr></table></figure><br>启动成功之后，在浏览器中输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ，输出结果如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue879d435f53758ab6b.md.png" alt="“Vue第一天”"></p><h3 id="Vue-js-目录结构"><a href="#Vue-js-目录结构" class="headerlink" title="Vue.js 目录结构"></a>Vue.js 目录结构</h3><p>打开创建好的项目文件，具体结构如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/09/201908091647110a2403b9c22c70fb.png" alt="“vue项目创建和运行”"><br>我们将每个文件的名称及作用进行解析。</p><table><thead><tr><th style="text-align:center">文件名称</th><th style="text-align:center">说明/作用</th></tr></thead><tbody><tr><td style="text-align:center">node_modules</td><td style="text-align:center">npm 加载的项目依赖模块</td></tr><tr><td style="text-align:center">build</td><td style="text-align:center">项目搭建(webpack)相关代码</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">配置目录，包括端口号等。初学可以使用默认的</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：<br>assets: 放置一些图片，如logo等。<br>components: 目录里面放了一个组件文件，可以不用。<br>App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。<br>main.js: 项目的核心文件。</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态资源目录，如图片、字体等。</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">初始测试目录，可删除</td></tr><tr><td style="text-align:center">index.html</td><td style="text-align:center">首页入口文件，你可以添加一些 meta 信息或统计代码等。</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:center">项目配置文件。</td></tr><tr><td style="text-align:center">package-lock.json</td><td style="text-align:center">对结合了逻辑树和物理树的一个快照（snapshot），里面有明确的各依赖版本号，实际安装的结构，也有逻辑树的结构</td></tr><tr><td style="text-align:center">README.md</td><td style="text-align:center">项目的说明文档，markdown 格式</td></tr></tbody></table><h3 id="项目的首页入口"><a href="#项目的首页入口" class="headerlink" title="项目的首页入口"></a>项目的首页入口</h3><p>我们可以尝试修改下初始化的项目，找到src文件下的components下的HelloWorld.vue.<br>则src/components/HelloWorld.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;第一个Vue项目创建好啦！！！&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们修改后，保存，页面会自动刷新。<br><img src="http://pic.zhaotu.me/2019/08/09/20190809173515ca48eaa74be6ca1a.png" alt="“Vue第一天”"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近想着应该好好的学习下vue.js来补充下自己的知识，所以接下来我将会把每天学的东西记录下来，供我们大家一起学习。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xiayunhu.github.io/uncategorized/IIS%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE/"/>
    <id>http://xiayunhu.github.io/uncategorized/IIS部署php项目/</id>
    <published>2019-08-07T00:11:00.739Z</published>
    <updated>2019-08-08T09:24:52.446Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue项目创建和运行</title>
    <link href="http://xiayunhu.github.io/Vue/vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
    <id>http://xiayunhu.github.io/Vue/vue项目创建和运行/</id>
    <published>2019-07-05T16:00:00.000Z</published>
    <updated>2019-08-08T08:13:11.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近我在GitHub上边看到一个Vue和NodeJs项目，感觉还不错，就自己下载运行部署了一下，感觉身为一个前端开发程序员，是要Vue和node.js好好的学习一下，来储备一下自己的知识。</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>首先创建Vue，第一步就要安装NodeJs,因为我们要用到npm。在百度上搜索nodejs进入官网，进行安装包下载。<br>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><h4 id="重点说一下Windows上安装Node-js"><a href="#重点说一下Windows上安装Node-js" class="headerlink" title="重点说一下Windows上安装Node.js"></a>重点说一下Windows上安装Node.js</h4><p>根据你电脑的配置，来选择32位还是64位下载：<br>32 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi</a><br>64 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi</a></p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>1、打开下载的安装包，双击安装程序，如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node1227ffb42abe36ef0.png" alt="“vue项目创建和运行”"><br>2、点击Run，运行安装。如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node2735e15fdbdfceae6.md.png" alt="“vue项目创建和运行”"><br>3、 勾选接受协议选项，那个正方形的选择框，点击 next（下一步） 按钮。如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node3667c5603aa52ad0b.md.png" alt="“vue项目创建和运行”"><br>4、选择你所安装的位置。<br><img src="http://pic.zhaotu.me/2019/08/08/node4f54cf4d96ddfda6b.md.png" alt="“vue项目创建和运行”"><br>5、选择好，然后一路next，等待安装的过程。如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node5dfdeffd4f5fea83b.md.png" alt="“vue项目创建和运行”"><br>6、当出现这样的画面是，就表示安装完成。<br><img src="http://pic.zhaotu.me/2019/08/08/node6bd902f00741c8dca.md.png" alt="“vue项目创建和运行”"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;path</span><br><span class="line">PATH=C:\Program Files (x86)\Common Files\Intel\Shared Libraries\redist\intel64_win\compiler;</span><br><span class="line">C:\WINDOWS\system32;</span><br><span class="line">C:\Program Files\nodejs\;</span><br><span class="line">C:\Users\Administrator\AppData\Roaming\npm;</span><br><span class="line">C:\Program Files\nodejs\npm_global;</span><br></pre></td></tr></table></figure></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1、安装好了之后，我们点击开始=》运行=》输入”cmd” =&gt; 输入 node -v 来查看是否安装成功。如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node7b179e4fc9f779b35.md.png" alt="“vue项目创建和运行”"><br>出现这个版本号（版本号不一定和我的一样）就说明安装成功了。<br>2、检查npm管理包，npm是集成在node中的，我们还是在打开cmd中输入 npm -v来查看是否安装成功。如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node89119b04f1eb97cf9.md.png" alt="“vue项目创建和运行”"><br>出现这个版本号（版本号不一定和我的一样）就说明安装成功了。</p><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><p>由于npm有些资源被屏蔽,而且有些是国外资源的原因， 会导致安装依赖的时候失败。这里我们选择安装cnpm国内镜像。输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>然后等待，进行下一步，如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/node972276d4cd4d01c6f.md.png" alt="“vue项目创建和运行”"><br>安装完，nodejs这一块就完了。</p><h3 id="安装Vue"><a href="#安装Vue" class="headerlink" title="安装Vue"></a>安装Vue</h3><p>这一部分主要是讲述vue的项目创建及运行。</p><h4 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h4><p>点击开始=》运行=》输入”cmd” =&gt;右击以管理员身份运行=&gt;输入 cnpm install -g vue-cli ，等待完成。如图所示<br><img src="http://pic.zhaotu.me/2019/08/08/vue1f7fba3852cc77068.md.png" alt="“vue项目创建和运行”"><br>等待安装好之后，我们就可以创建我们的vue项目了。</p><h4 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h4><p>还是以管理员身份运行命令提示符（”cmd”），在这里面切换我们要把项目放到哪个盘，打开默认的为C盘。我这里把项目安装到D盘里。<br>输入D：回车就切换到D盘了，例如：C:\WINDOWS\system32&gt;D:<br>在当前盘下用vue init webpack firstVue  初始化一个项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;D:</span><br><span class="line">D:\&gt;vue init webpack xyhVue  //回车</span><br></pre></td></tr></table></figure>在安装刚开始的过程中需要手动回车，还要我们填一些选择。根据我这个填就好了。如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue2ecbe3a19f405465f.md.png" alt="“vue项目创建和运行”"><img src="http://pic.zhaotu.me/2019/08/08/vue3a5b8fccee53edf53.md.png" alt="“vue项目创建和运行”"><img src="http://pic.zhaotu.me/2019/08/08/vue46e57d62e3a1e77fe.md.png" alt="“vue项目创建和运行”"><br>到这里vue项目就创建好了。</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>从命令提示符里面进入创建的项目，然后执行命令 cnpm install ，等待安装，如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue562cf40e78a4a3779.md.png" alt="“vue项目创建和运行”"><br>等待安装完成，我们的项目中就会多出来一个文件，就说明安装成功了，如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue624647711694b0632.md.png" alt="“vue项目创建和运行”"></p><h3 id="运行-Vue项目"><a href="#运行-Vue项目" class="headerlink" title="运行 Vue项目"></a>运行 Vue项目</h3><p>到此，我们已经做好了所有的准备，现在我们就运行下这个Vue项目，执行<b>npm run dev</b> 运行项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><br>具体如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue798273bb6a5208230.md.png" alt="“vue项目创建和运行”"><br>等待启动完成，你就可以在浏览器上访问了，默认的为 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>, 如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/vue879d435f53758ab6b.md.png" alt="“vue项目创建和运行”"><br>我们的项目正式搭起来了，接下来我会一点一点的记录我学习Vue的过程的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近我在GitHub上边看到一个Vue和NodeJs项目，感觉还不错，就自己下载运行部署了一下，感觉身为一个前端开发程序员，是要Vue和no
      
    
    </summary>
    
      <category term="Vue" scheme="http://xiayunhu.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://xiayunhu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>获取图书信息api</title>
    <link href="http://xiayunhu.github.io/%E6%8E%A5%E5%8F%A3/%E8%8E%B7%E5%8F%96%E5%9B%BE%E4%B9%A6api/"/>
    <id>http://xiayunhu.github.io/接口/获取图书api/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-07-06T09:38:52.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在做一个图书扫码的藏书的小程序，在调取豆瓣的api时，发现不能调用了，好像是豆瓣的api关闭了。后来找了很久才找到了一个可以用的api。</p><h3 id="获取api"><a href="#获取api" class="headerlink" title="获取api"></a>获取api</h3><p>原本的豆瓣根据条形码编号获取图书的地址为：<a href="https://api.douban.com/v2/book/isbn/+条形码号，" target="_blank" rel="noopener">https://api.douban.com/v2/book/isbn/+条形码号，</a> 现在不可以用了。当你访问这个地址会出现这样一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;msg&quot;:&quot;invalid_apikey&quot;,&quot;code&quot;:104,&quot;request&quot;:&quot;GET \/v2\/book\/isbn\/+条形码号，&quot;</span><br></pre></td></tr></table></figure><br>所以现在将API基地址改为<a href="https://douban.uieee.com" target="_blank" rel="noopener">https://douban.uieee.com</a> ， 这样就可以获取到信息了。<br>例如：<a href="https://douban.uieee.com/v2/book/isbn/9787115281609" target="_blank" rel="noopener">https://douban.uieee.com/v2/book/isbn/9787115281609</a></p><h3 id="附上一些文档网址"><a href="#附上一些文档网址" class="headerlink" title="附上一些文档网址"></a>附上一些文档网址</h3><p>豆瓣图书API文档：<a href="https://douban-api-docs.zce.me/book.html" target="_blank" rel="noopener">https://douban-api-docs.zce.me/book.html</a><br>豆瓣API文档：<a href="http://www.doubanapi.com/1012073" target="_blank" rel="noopener">http://www.doubanapi.com/1012073</a><br>文档源文件：<a href="https://github.com/zce/douban-api-docs" target="_blank" rel="noopener">https://github.com/zce/douban-api-docs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在做一个图书扫码的藏书的小程序，在调取豆瓣的api时，发现不能调用了，好像是豆瓣的api关闭了。后来找了很久才找到了一个可以用的api。
      
    
    </summary>
    
      <category term="接口" scheme="http://xiayunhu.github.io/categories/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="接口" scheme="http://xiayunhu.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://xiayunhu.github.io/MySQL/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://xiayunhu.github.io/MySQL/MySQL笔记/</id>
    <published>2019-06-05T16:00:00.000Z</published>
    <updated>2019-06-11T08:25:45.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、-2006错误"><a href="#1、-2006错误" class="headerlink" title="1、#2006错误"></a>1、#2006错误</h3><p>在运行数据库时，没有运行成功，报错信息为：<b>2006 - MySQL server has gone away</b>原因可能是sql语句过长或文件比较大，超过了<br>mysql通信缓存区最大长度。这就需要我们调整mysql的配置文件中max_allowed_packet。解决方法就是在mysql可视化工具里的查询，<br>在里面输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL  max_allowed_packet=67108864;</span><br></pre></td></tr></table></figure>点击执行一下就好了。</p><h3 id="2、导入数据库错误"><a href="#2、导入数据库错误" class="headerlink" title="2、导入数据库错误"></a>2、导入数据库错误</h3><p>导入数据库报<b>Result: 1273 - Unknown collation: ‘utf8mb4_0900_ai_ci’</b>错误,原因可能是mysql版本不一致。<br>解决方法：    我们找到数据库的文件，用记事本打开，然后ctrl+f查找如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   查找：utf8mb4_0900_ai_ci </span><br><span class="line">全部替换为：utf8_general_ci </span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">查找：utf8mb4 </span><br><span class="line">全部替换为： utf8 </span><br></pre></td></tr></table></figure><br>就这样，然后在数据库重新运行一下就导入好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、-2006错误&quot;&gt;&lt;a href=&quot;#1、-2006错误&quot; class=&quot;headerlink&quot; title=&quot;1、#2006错误&quot;&gt;&lt;/a&gt;1、#2006错误&lt;/h3&gt;&lt;p&gt;在运行数据库时，没有运行成功，报错信息为：&lt;b&gt;2006 - MySQL serve
      
    
    </summary>
    
      <category term="MySQL" scheme="http://xiayunhu.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://xiayunhu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CSS设置字体、特殊字体</title>
    <link href="http://xiayunhu.github.io/CSS/CSS%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93/"/>
    <id>http://xiayunhu.github.io/CSS/CSS设置字体/</id>
    <published>2019-05-16T16:00:00.000Z</published>
    <updated>2019-08-08T08:15:18.838Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS引入字体"><a href="#CSS引入字体" class="headerlink" title="CSS引入字体"></a>CSS引入字体</h3><p>我们在Web开发的时候，由于各种需求的不同，有时用的字体也不一样，当我们下载下来的字体，不能安装到自己的电脑上，因为其他人的<br>电脑上不一定有这个字体，所以我们应把字体的文件放到项目文件中，用css来引入这个字体，这样不管电脑上有没有这个字体，都能正常<br>显示。不过要做IE的兼容处理。</p><h4 id="获取字体"><a href="#获取字体" class="headerlink" title="获取字体"></a>获取字体</h4><p>① webfont网站：<a href="https://www.webfont.com/" target="_blank" rel="noopener">https://www.webfont.com</a><br>② dafont网站：<a href="https://www.dafont.com/" target="_blank" rel="noopener">https://www.dafont.com</a><br>我就先介绍这两个吧，根据你的需要，也可在百度搜索。<br>下载的字体文件一般都是后缀为.ttf格式的，然后我们要兼容IE就需要把这个字体再转换成后缀为.woff和.eot的文件，<br>同时引入这三个文件就可以了。<br>转换工具：fontsquirre网站：<a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="noopener">https://www.fontsquirrel.com</a> 如下图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/11ab83273a6e5eb08.md.png" alt="“CSS设置字体”"><br>或者<a href="http://www.freefontconverter.com/" target="_blank" rel="noopener">fontconverter</a> 网站</p><h4 id="css设置字体语法"><a href="#css设置字体语法" class="headerlink" title="css设置字体语法"></a>css设置字体语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      &lt;style&gt;</span><br><span class="line">@font-face &#123;</span><br><span class="line">font-family: &apos;LCD&apos;;</span><br><span class="line">src: url(&apos;font/LCD.TTF&apos;); </span><br><span class="line">src: url(&apos;font/lcd-webfont.eot&apos;);  /* IE9 Compat Modes */</span><br><span class="line">src: url(&apos;font/lcd-webfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;); /* 兼容IE6-IE8 */ </span><br><span class="line">url(&apos;font/lcd-webfont.woff&apos;) format(&apos;woff&apos;);/* Modern Browsers */</span><br><span class="line">url(&apos;font/LCD.TTF&apos;) format(&apos;truetype&apos;);    /* Safari, Android, iOS */</span><br><span class="line">&#125;  </span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>以上代码把兼容问题也解决了，一个独特的@font-face语法。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>@font-face遵循先定义后使用原则。</li><li>一般的字体文件比较大，个人认为，可以用图片字体来代替字体文件。</li><li>引入字体文件的路径一定要对，否则会没有效果。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS引入字体&quot;&gt;&lt;a href=&quot;#CSS引入字体&quot; class=&quot;headerlink&quot; title=&quot;CSS引入字体&quot;&gt;&lt;/a&gt;CSS引入字体&lt;/h3&gt;&lt;p&gt;我们在Web开发的时候，由于各种需求的不同，有时用的字体也不一样，当我们下载下来的字体，不能安装到自
      
    
    </summary>
    
      <category term="CSS" scheme="http://xiayunhu.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xiayunhu.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>ionic的配置和安装</title>
    <link href="http://xiayunhu.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF/ionic%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>http://xiayunhu.github.io/移动端/ionic的配置和安装/</id>
    <published>2019-05-05T16:00:00.000Z</published>
    <updated>2019-08-08T08:39:02.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅谈ionic"><a href="#浅谈ionic" class="headerlink" title="浅谈ionic"></a>浅谈ionic</h3><ol><li><p>介绍<br>ionic 是一个强大的 HTML5 应用程序开发框架(HTML5 Hybrid Mobile App Framework )。 可以帮助您使用 Web 技术，比如<br>HTML、CSS和Javascript 构建接近原生体验的移动应用程序。<br>ionic是一个轻量的手机UI库，具有速度快，界面现代化、美观等特点。为了解决其他一些UI库在手机上运行缓慢的问题，它直接放弃了<br>IOS6和Android4.1以下的版本支持，来获取更好的使用体验。<br>详情可以去菜鸟教程学习 <a href="https://www.runoob.com/ionic/ionic-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/ionic/ionic-tutorial.html</a></p></li><li><p>特点</p><ul><li>ionic 基于Angular语法，简单易学。</li><li>ionic 是一个轻量级框架。</li><li>ionic 完美的融合下一代移动框架，支持 Angularjs 的特性， MVC ，代码易维护。</li><li>ionic 提供了漂亮的设计，通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。</li><li>ionic 专注原生，让你看不出混合应用和原生的区别</li><li>ionic 提供了强大的命令行工具。</li><li>ionic 性能优越，运行速度快。</li></ul></li></ol><ol start="3"><li><p>文档</p><p>ionic 官方网站：<a href="http://ionicframework.com/" target="_blank" rel="noopener">http://ionicframework.com/</a><br>ionic 官方文档：<a href="http://ionicframework.com/docs/" target="_blank" rel="noopener">http://ionicframework.com/docs/</a>    （中文版的文档：<a href="http://www.ionic.wang/js_doc-index.html）" target="_blank" rel="noopener">http://www.ionic.wang/js_doc-index.html）</a><br>Github 地址：<a href="https://github.com/driftyco/ionic" target="_blank" rel="noopener">https://github.com/driftyco/ionic</a></p></li></ol><hr><h3 id="安装ionic"><a href="#安装ionic" class="headerlink" title="安装ionic"></a>安装ionic</h3><p>安装ionic有三种方法，接下来我就一个一个的介绍。</p><h4 id="第一种直接使用"><a href="#第一种直接使用" class="headerlink" title="第一种直接使用"></a>第一种直接使用</h4><p>直接使用CDN 库地址，在你的网页头部中直接添加以下两句代码，这样就引入了ionic。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://cdn.staticfile.org/ionic/1.3.2/css/ionic.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/ionic/1.3.2/js/ionic.bundle.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="第二种手动引包"><a href="#第二种手动引包" class="headerlink" title="第二种手动引包"></a>第二种手动引包</h4><p>在ionic官网上下载资源包：<a href="http://ionicframework.com/docs/overview/#download。" target="_blank" rel="noopener">http://ionicframework.com/docs/overview/#download。</a> （目前我还没找到在哪下载的）<br>或者在github上下载 <a href="https://github.com/driftyco/ionic" target="_blank" rel="noopener">https://github.com/driftyco/ionic</a>  （在release 目录中）。<br>接下来，我们只需要在项目中引入以上目录中的 css/ionic.min.css 和 js/ionic.bundle.min.js 文件即可创建 ionic 应用。</p><h4 id="第三种命令行安装"><a href="#第三种命令行安装" class="headerlink" title="第三种命令行安装"></a>第三种命令行安装</h4><p>这个方法比较难点，我花了好长时间才弄好，由于第一次接触中间各种错误，每次还要好长时间来解决。<br>在这个之前你要安装node.js 具体的安装，可查找我前面的文章。这里我就不介绍了，附上下载网址（ <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a> ）<br>在接下来的安装中需要使用到其 NPM 工具，然后通过命令行工具安装最新版本的 cordova 和 ionic。<br>你可以选择在你想要放项目的盘里创建一个文件夹，用来存放ionic文件。接着用控制台（cmd）输入指令安装。<br>windows用户可以在开始搜索cmd直接打开控制台，或者按键盘win键在左下角所有应用里找到windows系统文件里面的命令提示符。<br><img src="http://pic.zhaotu.me/2019/08/08/1d7f5916d2c6c4a11.md.png" alt="“ionic的配置和安装”"><br><img src="http://pic.zhaotu.me/2019/08/08/2fedc16a3577aefe9.png" alt="“ionic的配置和安装”"></p><p>找到之后，右击选择以管理员身份运行。用命令行进入你的文件夹下面安装。<br>补充：如果文件在C盘，先进入C盘cd c:\,然后在cd 文件名选择下去，如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/59ac0102866a1a58a.md.png" alt="“ionic的配置和安装”"></p><p>然后Window 和 Linux 上执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cordova ionic</span><br></pre></td></tr></table></figure><p>Mac 系统上使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cordova ionic</span><br></pre></td></tr></table></figure><p>等待安装下载,过程中不要关闭控制台。<br>下载完成后，在控制台输出ionic -v 查看ionic是否下载完成，完成会出现以下界面：</p><p><img src="http://pic.zhaotu.me/2019/08/08/3706703930d15f4f5.md.png" alt="“ionic的配置和安装”"></p><p>接下来就是创建运行你的第一个ionic项目</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><p>如果安装过程中出现报错，有可能是npm报错，建议卸载nodejs重新安装，在你查看是否下载完成的时候，会出现以下提示：</p><p><img src="http://pic.zhaotu.me/2019/08/08/4ce868274d3a5c8d3.png" alt="“ionic的配置和安装”"></p><p>这个错误添加以下环境变量即可：直接在path加变量值：（D:\Program Files）你自己的地址\npm\node_global，我的就是这个错误，找了好久才找到原因。<br>好了，到此ionic安装结束。接下来我们就创建你的第一个ionic项目。</p><h4 id="创建ionic应用"><a href="#创建ionic应用" class="headerlink" title="创建ionic应用"></a>创建ionic应用</h4><p>切记：命令提示符一定要用管理员权限打开，否则可能由于权限问题导致项目安装运行失败。</p><p>之后，我们再次进入到安装ionic的目录下（参照上边补充的命令进入），然后输入要创建的项目名称（自己定义名字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic start XyhFirstIonicProject tabs</span><br></pre></td></tr></table></figure><p>其中XyhFirstIonicProject是你自己定义的项目名称，tabs是模板，除了tabs模板还有其他balnk等单页，具体可看官方文档。<br>回车等待创建成功。</p><hr><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h5><p>我在创建的时候遇到了几个错误，我在这列出来。</p><p><b>第一个：错误提示</b><br><img src="http://pic.zhaotu.me/2019/08/08/6ddf6b9d815292448.md.png" alt="“ionic的配置和安装”"><br>这个应该是你的网络问题，查看下网络是否连接好，关闭命令框再重新打开安装即可。</p><p><b>第二个：错误提示</b><br><img src="http://pic.zhaotu.me/2019/08/08/7cdfa4874fa923c70.md.png" alt="“ionic的配置和安装”"></p><p>这个错误就比较头疼了，我找了好久才解决。在你的C盘下找到用户，进去找到你的账户名（我的是：C:\Users\Administrator）再进去找<br>到<b>.npmrc文件</b>，用记事本打开，我的打开是这样的：</p><p><img src="http://pic.zhaotu.me/2019/08/08/121920bdbeef86d4fa.md.png" alt="“ionic的配置和安装”"></p><p>删除这个淘宝镜像，应该就可以了。在C盘下可能不能直接删，先把文件复制出来，然后删除完在替换下就好了。接下来就可以顺利的创建项目了。</p><hr><p>在创建完成之后，你会看到页面上出现了一个提问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install the free Ionic Appflow SDK and connect your app?</span><br></pre></td></tr></table></figure></p><p>果断的回答NO，等待创创建成功。如图所示：</p><p><img src="http://pic.zhaotu.me/2019/08/08/94fb610a8ddd905b5.md.png" alt="“ionic的配置和安装”"><br><img src="http://pic.zhaotu.me/2019/08/08/82c55a3a3644c8eb7.md.png" alt="“ionic的配置和安装”"></p><p>到这一步，你的ionic项目就创建完成了。<br>项目里的文件内容：<br><img src="http://pic.zhaotu.me/2019/08/08/10d378b02b713f2116.md.png" alt="“ionic的配置和安装”"></p><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>在控制台原来的地址（ c:\Program Files\nodejs\npm_global\node_modules\ionic）再往下一层进入到创建的项目文件夹下，<br>(输入cd XyhFirstIonicProject)。再输入ionic serve，会得到以下信息：就证明可以浏览了。</p><p><img src="http://pic.zhaotu.me/2019/08/08/11c5a21ea7454cd0ca.md.png" alt="“ionic的配置和安装”"></p><p>页面实现如图所示：<br><img src="http://pic.zhaotu.me/2019/08/08/138edc24bcb804ce85.png" alt="“ionic的配置和安装”"></p><p>此时整个项目创建加运行就结束了，这就是ionic移动项目了，在此基础上可以开发自己需求了。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浅谈ionic&quot;&gt;&lt;a href=&quot;#浅谈ionic&quot; class=&quot;headerlink&quot; title=&quot;浅谈ionic&quot;&gt;&lt;/a&gt;浅谈ionic&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;介绍&lt;br&gt;ionic 是一个强大的 HTML5 应用程序开发框架(HTML5 H
      
    
    </summary>
    
      <category term="移动端" scheme="http://xiayunhu.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="ionic" scheme="http://xiayunhu.github.io/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>从0到1学JavaScript</title>
    <link href="http://xiayunhu.github.io/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://xiayunhu.github.io/JavaScript/JavaScript常用小知识/</id>
    <published>2019-04-28T16:00:00.000Z</published>
    <updated>2019-07-18T08:57:51.165Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript是区分大小写的语言，关键字、变量、函数名以及所有的标识符都必须采用一致的字符大小写形式。</p><h3 id="字符串应用"><a href="#字符串应用" class="headerlink" title="字符串应用"></a>字符串应用</h3><p>1、获取字符串的长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//定义一个字符串</span><br><span class="line">var s = &quot;afcsdmf&quot;;</span><br><span class="line"> //获取字符串的长度</span><br><span class="line">var len = s.length;</span><br><span class="line">//打印长度</span><br><span class="line">console.log(len); </span><br></pre></td></tr></table></figure></p><p>2、获取字符串的最后一个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //获取字符串最后一个字符          </span><br><span class="line">var last_char = s.charAt(s.length - 1)</span><br><span class="line">  </span><br><span class="line">console.log(last_char);</span><br></pre></td></tr></table></figure><p>3、获取字符串第几个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //从字符串中选出2,3,4,5个字符,从0开始算         </span><br><span class="line">var sub = s.substring(1,5)</span><br><span class="line">  </span><br><span class="line">console.log(sub);         </span><br></pre></td></tr></table></figure><p>4、查找第一个字母的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在字符串中查找第一个字母c的位置,从0开始算</span><br><span class="line">var i = s.indexOf(&apos;c&apos;);</span><br><span class="line">  </span><br><span class="line">console.log(i);         </span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>1、创建对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建对象</span><br><span class="line"> var o = new Object();</span><br><span class="line">  </span><br><span class="line"> var now = new Date();     </span><br><span class="line"></span><br><span class="line">//设计对象属性         </span><br><span class="line"> o.x = 33;</span><br><span class="line">  </span><br><span class="line"> o.y = 43;  </span><br></pre></td></tr></table></figure></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>1、创建数字并赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建数组并赋值</span><br><span class="line"> var a = new Array();</span><br><span class="line"> a[0] = 10;</span><br><span class="line"> a[1] = 21;</span><br><span class="line"> a[2] = 33;</span><br><span class="line"> a[3] = &quot;adacs&quot;;</span><br></pre></td></tr></table></figure><h3 id="获取div高度"><a href="#获取div高度" class="headerlink" title="获取div高度"></a>获取div高度</h3><p>1、获取div的高度<br>可根据浏览器页面的高度，算出div的高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">      &lt;div id=&quot;outscroll&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;js/jquery/jQuery-2.2.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">          $(document).ready(function()&#123;</span><br><span class="line">            var o = document.getElementById(&quot;outscroll&quot;);</span><br><span class="line">           </span><br><span class="line">                var h = o.offsetHeight; //高度                   </span><br><span class="line">                var w = o.offsetWidth; //宽度</span><br><span class="line">                alert(h);</span><br><span class="line">                alert(w);</span><br><span class="line">             </span><br><span class="line">          &#125;); </span><br><span class="line">          &lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这是几个其他获取高度的值。<br>alert($(window).height()); //浏览器当前窗口可视区域高度<br>alert($(document).height()); //浏览器当前窗口文档的高度<br>alert($(document.body).height());//浏览器当前窗口文档body的高度<br>alert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin<br>alert($(window).width()); //浏览器当前窗口可视区域宽度<br>alert($(document).width());//浏览器当前窗口文档对象宽度<br>alert($(document.body).width());//浏览器当前窗口文档body的高度<br>alert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin<br>或者，这样也可以获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         window.onload = function()&#123;</span><br><span class="line">         var deviceHeight = document.documentElement.clientHeight;</span><br><span class="line">         console.log(deviceHeight); </span><br><span class="line">        &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="键盘按回车键登录"><a href="#键盘按回车键登录" class="headerlink" title="键盘按回车键登录"></a>键盘按回车键登录</h3><p>当我们做登录页面时，习惯性的喜欢输入完账号和密码，再按下回车键登录，这里我用js控制了一下enter键来实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onkeydown=&quot;on_return()&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//回车时，默认是登陆</span><br><span class="line"> function on_return()&#123;</span><br><span class="line"> if(window.event.keyCode == 13)&#123;</span><br><span class="line">  if (document.all(&apos;btnLogin&apos;)!=null)&#123;</span><br><span class="line">   document.all(&apos;btnLogin&apos;).click();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript是区分大小写的语言，关键字、变量、函数名以及所有的标识符都必须采用一致的字符大小写形式。&lt;/p&gt;
&lt;h3 id=&quot;字符串应用&quot;&gt;&lt;a href=&quot;#字符串应用&quot; class=&quot;headerlink&quot; title=&quot;字符串应用&quot;&gt;&lt;/a&gt;字符串应用&lt;/h3
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://xiayunhu.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://xiayunhu.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
